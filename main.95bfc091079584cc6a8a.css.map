{"version":3,"sources":["webpack://knoma/./client/document-detail/document-properties-preview.vue","webpack://knoma/./client/document-list/document-list.vue"],"names":[],"mappings":";AA2EA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;AACA;AACA;EACA;AACA;AACA;EACA;AACA;AACA;EACA;AACA;;;AC0BA;EACA;AACA;AAEA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA","file":"main.95bfc091079584cc6a8a.css","sourcesContent":["<template>\n  <v-container class=\"outer\">\n    Properties:\n    <dl\n      v-for=\"predicate of content\"\n      :key=\"predicate.iri\"\n    >\n      <dt>{{ predicate.label }}:</dt>\n      <dd\n        v-for=\"(item, index) in predicate.items\"\n        :key=\"index\"\n      >\n        {{ item }}\n      </dd>\n    </dl>\n  </v-container>\n</template>\n\n<script>\nimport {getDatabase} from \"../database\";\n\nexport default {\n  \"name\": \"DocumentPropertiesPreview\",\n  \"props\": {\n    \"value\": {\"type\": Object, \"required\": true},\n  },\n  \"data\": () => ({\n    \"loading\": false,\n    \"content\": [],\n  }),\n  \"watch\": {\n    \"value.properties\": async function (nextProperties) {\n      await this.updateProperties(nextProperties);\n    },\n  },\n  \"mounted\": async function () {\n    await this.updateProperties(this.value.properties);\n  },\n  \"methods\": {\n    \"updateProperties\": async function(properties) {\n      const database = getDatabase();\n      const result = [];\n      for (const [predicateIri, items] of Object.entries(properties)) {\n        const predicate = await database.getPredicate(predicateIri);\n        const itemsToShow = await predicateToValues(database, predicate, items);\n        result.push({\n          \"iri\": predicateIri,\n          \"label\": predicate.label,\n          \"items\": itemsToShow,\n        });\n      }\n      result.sort((left, right) => left.label.localeCompare(right.label));\n      this.content = result;\n    },\n  },\n};\n\nasync function predicateToValues(database, predicate, values) {\n  let result = [];\n  switch (predicate.type) {\n    case \"codelist\":\n      for (const item of values) {\n        result.push(await database.getLabel(item));\n      }\n      break;\n    default:\n      result = values;\n      break;\n  }\n  return result;\n}\n\n</script>\n\n<style scoped>\n.outer {\n  border-bottom: 1px solid gray;\n  margin-bottom: 1rem;\n  padding-top: 0;\n}\ndl {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 1rem;\n}\ndl dd {\n  margin-left: 1rem;\n}\ndl dd:after {\n  content: \",\";\n}\ndl dd:last-child:after {\n  content: \"\";\n}\n</style>\n","<template>\n  <v-container>\n    <app-filter\n      v-model=\"source.filters\"\n      @change=\"reload\"\n    />\n    <v-list class=\"item-list\">\n      <app-item\n        v-for=\"item in source.visibleDocuments\"\n        :key=\"item.iri\"\n        :value=\"item\"\n        @open=\"onOpen\"\n        @delete=\"onDelete\"\n      />\n      <v-divider />\n      <v-list-item>\n        <v-list-item-content\n          v-if=\"source.visibleLimit < source.documents.length\"\n        >\n          <div>\n            Showing {{ source.visibleLimit }}\n            out of {{ source.documents.length }}\n            documents.\n          </div>\n          <v-btn\n            class=\"mt-2\"\n            @click=\"onShowMore\"\n          >\n            Show more\n          </v-btn>\n        </v-list-item-content>\n        <v-list-item-content\n          v-else\n        >\n          All of {{ source.documents.length }} documents are visible.\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n    <div class=\"floating-menu\">\n      <v-btn\n        class=\"bottom\"\n        color=\"green darken-2\"\n        fab\n        dark\n        @click=\"onCreate\"\n      >\n        <v-icon>mdi-plus</v-icon>\n      </v-btn>\n    </div>\n    <v-overlay :value=\"loading\">\n      <v-progress-circular\n        :size=\"50\"\n        color=\"primary\"\n        indeterminate\n      />\n    </v-overlay>\n  </v-container>\n</template>\n\n<script>\nimport {getDatabase} from \"../database\";\nimport Item from \"./document-list-item\";\nimport Filter from \"./document-filter\";\nimport {FilteredDocumentSource} from \"./filtered-document-source\";\n\nexport default {\n  \"name\": \"DocumentList\",\n  \"components\": {\n    \"app-item\": Item,\n    \"app-filter\": Filter,\n  },\n  \"data\": () => ({\n    \"source\": new FilteredDocumentSource(),\n    \"loading\": false,\n  }),\n  \"mounted\": async function mounted() {\n    await this.reload();\n  },\n  \"methods\": {\n    \"onOpen\": function (event) {\n      const location = {\n        \"name\": \"document-edit\",\n        \"query\": {\n          \"document\": event.iri,\n        },\n      };\n      if (event.ctrlKey) {\n        const url = this.$router.resolve(location).href;\n        window.open(url, \"_blank\");\n      } else {\n        this.$router.push(location);\n      }\n    },\n    \"onDelete\": async function (iri) {\n      this.loading = true;\n      const database = getDatabase();\n      await database.deleteDocument(iri);\n      this.loading = false;\n      //\n      await this.reload();\n    },\n    \"onCreate\": function () {\n      this.$router.push({\n        \"name\": \"document-edit\",\n      });\n    },\n    \"reload\": async function() {\n      this.loading = true;\n      await this.source.refresh();\n      this.loading = false;\n    },\n    \"onShowMore\": function() {\n      this.source.showMore();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.bottom {\n  bottom: 2rem;\n}\n\n.floating-menu {\n  position: fixed;\n  right: 1rem;\n  bottom: -0.9rem;\n}\n\n.item-list {\n  margin-bottom: 5rem;\n}\n</style>\n"],"sourceRoot":""}