{"version":3,"file":"main.0f1875bcde46d5791657.css","mappings":";AA0EA;EACE,aAAa;EACb,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,YAAY;AACd;AACA;EACE,WAAW;AACb;;;ACiCA;EACE,6BAA6B;EAC7B,sBAAsB;EACtB,qBAAqB;EACrB,cAAc;AAChB;;;ACgDA;EACE,aAAa;AACf;;;ACxCA;EACE,aAAa;AACf;;;AC0BA;EACE,cAAc;AAChB;;;;ACpCA;EACE,eAAe;EACf,WAAW;EACX,YAAY;AACd;AAEA;EACE,mBAAmB;AACrB;;;AC7FA;EACE;AACF","sources":["webpack://knoma/./client/components/properties-preview.vue","webpack://knoma/./client/document-detail/document-detail-header.vue","webpack://knoma/./client/document-detail/note-edit.vue","webpack://knoma/./client/components/properties-dialog-item.vue","webpack://knoma/./client/document-list/type-filter.vue","webpack://knoma/./client/document-list/document-list.vue","webpack://knoma/./client/application/layout.vue"],"sourcesContent":["<template>\n  <div>\n    <dl\n      v-for=\"predicate of content\"\n      :key=\"predicate.iri\"\n    >\n      <dt>{{ predicate.label }}:</dt>\n      <dd\n        v-for=\"(item, index) in predicate.items\"\n        :key=\"index\"\n      >\n        {{ item }}\n      </dd>\n    </dl>\n  </div>\n</template>\n\n<script>\nimport {getDatabase} from \"../database\";\n\nexport default {\n  \"name\": \"PropertiesPreview\",\n  \"props\": {\n    \"value\": {\"type\": Object, \"required\": true},\n  },\n  \"data\": () => ({\n    \"loading\": false,\n    \"content\": [],\n  }),\n  \"watch\": {\n    \"value.properties\": async function (nextProperties) {\n      await this.updateProperties(nextProperties);\n    },\n  },\n  \"mounted\": async function () {\n    await this.updateProperties(this.value.properties);\n  },\n  \"methods\": {\n    \"updateProperties\": async function(properties) {\n      const database = getDatabase();\n      const result = [];\n      for (const [predicateIri, items] of Object.entries(properties)) {\n        const predicate = await database.getPredicate(predicateIri);\n        const itemsToShow = await predicateToValues(database, predicate, items);\n        result.push({\n          \"iri\": predicateIri,\n          \"label\": predicate.label,\n          \"items\": itemsToShow,\n        });\n      }\n      result.sort((left, right) => left.label.localeCompare(right.label));\n      this.content = result;\n    },\n  },\n};\n\nasync function predicateToValues(database, predicate, values) {\n  let result = [];\n  switch (predicate.type) {\n    case \"codelist\":\n      for (const item of values) {\n        result.push(await database.getLabel(item));\n      }\n      break;\n    default:\n      result = values;\n      break;\n  }\n  return result;\n}\n\n</script>\n\n<style scoped>\ndl {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 1rem;\n}\ndl dd {\n  margin-left: 1rem;\n}\ndl dd:after {\n  content: \",\";\n}\ndl dd:last-child:after {\n  content: \"\";\n}\n</style>\n","<template>\n  <div>\n    <div>\n      <v-btn\n        icon=\"mdi-share-variant\"\n        size=\"small\"\n        variant=\"text\"\n        class=\"ml-2 mr-4\"\n        @click=\"onCopyIri\"\n      />\n      <v-btn\n        icon=\"mdi-pencil\"\n        size=\"small\"\n        variant=\"text\"\n        class=\"mr-4\"\n        @click=\"onEditProperties(modelValue)\"\n      />\n      <app-types\n        :value=\"modelValue\"\n        @input=\"onEditType\"\n      />\n    </div>\n    <v-text-field\n      :model-value=\"modelValue.title\"\n      label=\"Title *\"\n      required\n      @update:model-value=\"onChangeTitle\"\n    />\n    <v-textarea\n      :model-value=\"modelValue.description\"\n      auto-grow\n      clearable\n      clear-icon=\"mdi-close-circle\"\n      rows=\"1\"\n      label=\"Description\"\n      @update:model-value=\"onChangeDescription\"\n    />\n    <div class=\"outer\">\n      Properties:\n      <app-properties-preview :value=\"modelValue\" />\n    </div>\n    <v-layout>\n      <v-btn\n        class=\"mr-4\"\n        @click=\"onSave\"\n      >\n        Save\n      </v-btn>\n      <v-btn @click=\"onClose\">\n        Close\n      </v-btn>\n    </v-layout>\n  </div>\n</template>\n\n<script>\nimport TypeLine from \"./type-line\";\nimport PropertiesPreview from \"../components/properties-preview\";\n\nexport default {\n  \"name\": \"DocumentDetailHeader\",\n  \"components\": {\n    \"app-types\": TypeLine,\n    \"app-properties-preview\": PropertiesPreview,\n  },\n  \"props\": {\n    \"modelValue\": {\"type\": Object, \"required\": true},\n  },\n  \"emits\": [\n    \"update:model-value\",\n    /**\n     * Change document type.\n     */\n    \"edit-type\",\n    /**\n     * Change document properties.\n     */\n    \"edit-properties\",\n    /**\n     * Save document.\n    */\n    \"save\",\n    /**\n     * Close document.\n     */\n    \"close\",\n  ],\n  \"methods\": {\n    \"onCopyIri\": function () {\n      navigator.clipboard.writeText(this.modelValue.iri);\n    },\n    \"onChangeTitle\": function (value) {\n      this.$emit(\"update:model-value\", {\n        ...this.modelValue,\n        \"title\": value,\n      });\n    },\n    \"onChangeDescription\": function (value) {\n      this.$emit(\"update:model-value\", {\n        ...this.modelValue,\n        \"description\": value,\n      });\n    },\n    \"onEditType\": function(owner) {\n      this.$emit(\"edit-type\", owner);\n    },\n    \"onEditProperties\": function() {\n      this.$emit(\"edit-properties\", this.modelValue);\n    },\n    \"onSave\": function () {\n      this.$emit(\"save\");\n    },\n    \"onClose\": function () {\n      this.$emit(\"close\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.outer {\n  border-bottom: 1px solid gray;\n  padding-bottom: 0.5rem;\n  margin-bottom: 0.5rem;\n  padding-top: 0;\n}\n</style>\n","<template>\n  <v-card\n    class=\"mx-2\"\n    width=\"100%\"\n  >\n    <v-card-title class=\"py-0 flex\">\n      <v-btn\n        icon=\"mdi-share-variant\"\n        size=\"small\"\n        class=\"ml-2 mr-4\"\n        @click=\"onCopyIri\"\n      />\n      <v-btn\n        icon=\"mdi-pencil\"\n        size=\"small\"\n        class=\"mr-4\"\n        @click=\"onEditProperties(value)\"\n      />\n      <v-switch\n        :model-value=\"isQuote\"\n        color=\"indigo\"\n        label=\"Quote\"\n        density=\"compact\"\n        @update:model-value=\"onToggleQuote\"\n      />\n      <v-spacer />\n      <v-btn\n        icon=\"mdi-minus\"\n        size=\"small\"\n        variant=\"text\"\n        color=\"red\"\n        class=\"mr-4\"\n        @click=\"onDelete\"\n      />\n      <v-btn\n        icon=\"mdi-plus\"\n        size=\"small\"\n        variant=\"text\"\n        color=\"green\"\n        @click=\"onAdd()\"\n      />\n    </v-card-title>\n    <v-card-text>\n      <v-textarea\n        :model-value=\"value.text\"\n        class=\"note-content-input\"\n        auto-grow\n        clearable\n        clear-icon=\"mdi-close-circle\"\n        rows=\"1\"\n        label=\"Content\"\n        :hide-details=\"true\"\n        @update:model-value=\"onChangeContent\"\n        @paste=\"onPaste\"\n        @keydown=\"onKeyDown\"\n      />\n      <img\n        v-show=\"value.image && showImage\"\n        :src=\"value.image\"\n        style=\"border-style: ridge;background-color: wheat;width: 100%;\"\n      >\n    </v-card-text>\n    <v-card-actions v-show=\"value.image\">\n      <v-btn\n        @click=\"onToggleImage\"\n      >\n        Toggle Image\n      </v-btn>\n      <v-btn\n        v-show=\"showImage\"\n        @click=\"onClearImage\"\n      >\n        Clear Image\n      </v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\nimport {onToggleQuote} from \"./note-edit-service\";\nimport {QUOTE} from \"../database/predefined\";\n\nexport default {\n  \"name\": \"NoteEdit\",\n  \"props\": {\n    \"value\": {\"type\": Object, \"required\": true},\n    \"documentIri\": {\"type\": String, \"required\": true},\n  },\n  \"emits\": [\n    \"input\",\n    /**\n     * Delete note.\n     */\n    \"delete\",\n    /**\n     * Insert new note after this one.\n     */\n    \"add\",\n    /**\n     * Change note properties.\n     */\n    \"edit-properties\",\n  ],\n  \"data\": () => ({\n    \"showImage\": false,\n  }),\n  \"computed\": {\n    \"isQuote\": function() {\n      return (this.value.types ?? []).includes(QUOTE);\n    },\n  },\n  \"methods\": {\n    \"onCopyIri\": function () {\n      const iri = this.documentIri + \"/notes/\" + this.value.identifier;\n      navigator.clipboard.writeText(iri);\n    },\n    \"onChangeContent\": function (value) {\n      this.$emit(\"input\", {\n        ...this.value,\n        \"text\": value,\n      });\n    },\n    \"onClearImage\": function () {\n      this.$emit(\"input\", {\n        ...this.value,\n        \"image\": undefined,\n      });\n    },\n    \"onDelete\": function () {\n      this.$emit(\"delete\");\n    },\n    \"onAdd\": function () {\n      this.$emit(\"add\");\n    },\n    \"onKeyDown\": function (event) {\n      if (event.altKey && event.key === \"q\") {\n        this.onToggleQuote();\n        event.preventDefault();\n      }\n    },\n    \"onPaste\": function (event) {\n      for (const item of event.clipboardData.items) {\n        if (!item.type.includes(\"image\")) {\n          continue;\n        }\n        event.preventDefault();\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = () => {\n          const imageInBase64 = reader.result;\n          this.$emit(\"input\", {\n            ...this.value,\n            \"image\": imageInBase64,\n          });\n        };\n        reader.readAsDataURL(file);\n        break;\n      }\n    },\n    \"onEditProperties\": function () {\n      this.$emit(\"edit-properties\", this.value);\n    },\n    \"onToggleImage\": function () {\n      this.showImage = !this.showImage;\n    },\n    \"onToggleQuote\": function () {\n      this.$emit(\"input\", onToggleQuote(this.value));\n    },\n  },\n};\n</script>\n\n<style scoped>\n.flex {\n  display: flex;\n}\n</style>\n","<template>\n  <v-list class=\"py-0\">\n    <v-list-subheader>\n      <v-btn\n        icon=\"mdi-minus\"\n        color=\"red\"\n        size=\"x-small\"\n        variant=\"text\"\n        @click=\"onDelete\"\n      />\n      {{ definition.label }}\n    </v-list-subheader>\n    <v-list-item\n      v-for=\"(content, index) in modelValue\"\n      :key=\"index\"\n    >\n      <div class=\"flex\">\n        <v-btn\n          v-if=\"definition.multiple\"\n          icon=\"mdi-plus\"\n          variant=\"text\"\n          size=\"small\"\n          @click=\"onAddValue(index)\"\n        />\n        <v-btn\n          v-if=\"definition.multiple\"\n          icon=\"mdi-minus\"\n          variant=\"text\"\n          size=\"small\"\n          @click=\"onDeleteValue(index)\"\n        />\n        <v-text-field\n          v-if=\"definition.type === 'date'\"\n          :model-value=\"content\"\n          type=\"date\"\n          density=\"compact\"\n          :hide-details=\"true\"\n          @update:model-value=\"(v) => onUpdateValue(index, v)\"\n        />\n        <v-text-field\n          v-if=\"definition.type === 'string'\"\n          :model-value=\"content\"\n          density=\"compact\"\n          :hide-details=\"true\"\n          @update:model-value=\"(v) => onUpdateValue(index, v)\"\n        />\n        <v-select\n          v-else-if=\"definition.type === 'codelist'\"\n          :model-value=\"content\"\n          :items=\"items\"\n          item-text=\"title\"\n          item-value=\"iri\"\n          density=\"compact\"\n          :hide-details=\"true\"\n          @update:model-value=\"(v) => onUpdateValue(index, v)\"\n        />\n      </div>\n    </v-list-item>\n    <v-list-item v-if=\"modelValue.length === 0\">\n      <v-btn\n        icon=\"mdi-plus\"\n        size=\"x-small\"\n        @click=\"onAddValue()\"\n      />\n    </v-list-item>\n  </v-list>\n</template>\n\n<script>\nimport {getDatabase} from \"../database\";\n\nexport default {\n  \"name\": \"PropertiesDialogItem\",\n  \"props\": {\n    \"predicate\": {\"type\": String, \"required\": true},\n    \"modelValue\": {\"type\": Array, \"required\": true},\n  },\n  \"emits\": [\n    \"update:model-value\",\n    /**\n     * Delete item.\n     */\n    \"delete\",\n  ],\n  \"data\": () => ({\n    \"definition\": {},\n    \"loading\": false,\n    \"items\": [],\n  }),\n  \"mounted\": async function () {\n    const database = getDatabase();\n    this.loading = true;\n    this.definition = (await database.getPredicate(this.predicate)) || {};\n    if (this.definition.type === \"codelist\") {\n      const iris = await database.getCodelist(this.definition.codelist);\n      const items = [];\n      for (const iri of iris) {\n        items.push({\n          \"iri\": iri,\n          \"title\": await database.getLabel(iri),\n        });\n      }\n      this.items = items;\n    }\n    this.loading = false;\n  },\n  \"methods\": {\n    \"onDelete\": function () {\n      this.$emit(\"delete\");\n    },\n    \"onAddValue\": function (index) {\n      this.$emit(\"update:model-value\", [\n        ...this.modelValue.slice(0, index + 1),\n        \"\",\n        ...this.modelValue.slice(index + 1),\n      ]);\n    },\n    \"onDeleteValue\": function (index) {\n      this.$emit(\"update:model-value\", [\n        ...this.modelValue.slice(0, index),\n        ...this.modelValue.slice(index + 1),\n      ]);\n    },\n    \"onUpdateValue\": function (index, value) {\n      this.$emit(\"update:model-value\", [\n        ...this.modelValue.slice(0, index),\n        value,\n        ...this.modelValue.slice(index + 1),\n      ]);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.flex {\n  display: flex;\n}\n</style>\n","<template>\n  <div>\n    <div>\n      Types:\n      &nbsp;\n      <v-btn\n        icon=\"mdi-plus\"\n        size=\"x-small\"\n        @click=\"onAddInclude\"\n      />\n      &nbsp;\n      <v-btn\n        icon=\"mdi-minus\"\n        size=\"x-small\"\n        @click=\"onAddExclude\"\n      />\n    </div>\n    <div class=\"tag-line\">\n      <v-chip\n        v-for=\"(tag, index) in tags\"\n        :key=\"tag.iri\"\n        :color=\"tag.include ? 'green' : 'red'\"\n        size=\"small\"\n        class=\"mr-2\"\n        closable\n        @click:close=\"onRemoveType(index)\"\n      >\n        {{ tag.label }}\n      </v-chip>\n    </div>\n    <app-codelist-dialog\n      v-model=\"dialog.items\"\n      :visible=\"dialog.visible\"\n      :codelist=\"['http://www.w3.org/2000/01/rdf-schema#Class']\"\n      :multiple=\"false\"\n      @save=\"onSaveTypeDialog\"\n      @close=\"onCloseTypeDialog\"\n    />\n  </div>\n</template>\n\n<script>\nimport CodelistDialog from \"../components/codelist-dialog\";\nimport {getDatabase} from \"../database\";\n\nexport default {\n  \"name\": \"TypeFilter\",\n  \"components\": {\n    \"app-codelist-dialog\": CodelistDialog,\n  },\n  \"props\": {\n    \"value\": {\"type\": Object, \"required\": true},\n  },\n  \"emits\": [\n    \"input\",\n    /**\n     * Input value has changed.\n     */\n    \"change\",\n  ],\n  \"data\": () => ({\n    \"dialog\": {\n      \"items\": [],\n      \"visible\": false,\n      \"include\": true,\n    },\n    \"tags\": [],\n  }),\n  \"watch\": {\n    \"value.types\": function (oldValue, newValue) {\n      if (oldValue === newValue) {\n        return;\n      }\n      this.computeTags();\n    },\n  },\n  \"methods\": {\n    \"onAddInclude\": function () {\n      this.dialog.visible = true;\n      this.dialog.include = true;\n    },\n    \"onAddExclude\": function () {\n      this.dialog.visible = true;\n      this.dialog.include = false;\n    },\n    \"onSaveTypeDialog\": function (value) {\n      this.dialog.visible = false;\n      this.dialog.items = [];\n      if (value.length === 0) {\n        // No value.\n        return;\n      }\n      const iri = value[0];\n      // Check if the element is already in the list.\n      for (const index in this.value.types) {\n        const item = this.value.types[index];\n        if (item.iri !== iri) {\n          continue;\n        }\n        if (item.include === this.dialog.include) {\n          // Item is already stored.\n          return;\n        }\n        // Just update include and cancel.\n        this.$emit(\"input\", {\n          ...this.value,\n          \"types\": [\n            ...this.value.types.slice(0, index),\n            {\n              \"iri\": iri,\n              \"include\": this.dialog.include,\n            },\n            ...this.value.types.slice(index + 1),\n          ],\n        });\n        this.$emit(\"change\");\n        return;\n      }\n      // There is no such element.\n      this.$emit(\"input\", {\n        ...this.value,\n        \"types\": [\n          ...this.value.types,\n          {\n            \"iri\": iri,\n            \"include\": this.dialog.include,\n          },\n        ],\n      });\n      this.$emit(\"change\");\n    },\n    \"computeTags\": async function () {\n      const result = [];\n      const database = getDatabase();\n      for (const item of this.value.types) {\n        result.push({\n          \"iri\": item.iri,\n          \"label\": await database.getLabel(item.iri),\n          \"include\": item.include,\n        });\n      }\n      this.tags = result;\n    },\n    \"onCloseTypeDialog\": function () {\n      this.dialog.visible = false;\n      this.dialog.items = [];\n    },\n    \"onRemoveType\": function(index) {\n      this.$emit(\"input\", {\n        ...this.value,\n        \"types\": [\n          ...this.value.types.slice(0, index),\n          ...this.value.types.slice(index + 1),\n        ],\n      });\n      this.$emit(\"change\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n.tag-line {\n  margin: 0.5rem;\n}\n\n</style>","<template>\n  <v-container>\n    <app-filter\n      v-model=\"source.filters\"\n      @change=\"reload\"\n    />\n    <v-list class=\"item-list\">\n      <app-item\n        v-for=\"item in source.visibleDocuments\"\n        :key=\"item.iri\"\n        :value=\"item\"\n        @open=\"onOpen\"\n        @delete=\"onDelete\"\n      />\n      <v-divider />\n      <v-list-item>\n        <template v-if=\"source.visibleLimit < source.documents.length\">\n          <div>\n            Showing {{ source.visibleLimit }}\n            out of {{ source.documents.length }}\n            documents.\n          </div>\n          <v-btn\n            class=\"mt-2\"\n            @click=\"onShowMore\"\n          >\n            Show more\n          </v-btn>\n        </template>\n        <template v-else>\n          All of {{ source.documents.length }} documents are visible.\n        </template>\n      </v-list-item>\n    </v-list>\n    <div class=\"floating-menu\">\n      <v-btn\n        color=\"green darken-2\"\n        icon=\"mdi-plus\"\n        @click=\"onShowCreateDialog\"\n      />\n    </div>\n    <v-overlay :value=\"loading\">\n      <v-progress-circular\n        :size=\"50\"\n        color=\"primary\"\n        indeterminate\n      />\n    </v-overlay>\n    <app-create-document-dialog\n      :visible=\"showCreateDialog\"\n      @create=\"onCreateDocument\"\n      @close=\"onCloseCreateDialog\"\n    />\n  </v-container>\n</template>\n\n<script>\nimport {getDatabase} from \"../database\";\nimport Item from \"./document-list-item\";\nimport Filter from \"./document-filter\";\nimport {FilteredDocumentSource} from \"./filtered-document-source\";\nimport CreateDocumentDialog from \"./create-document-dialog\";\n\nexport default {\n  \"name\": \"DocumentListView\",\n  \"components\": {\n    \"app-item\": Item,\n    \"app-filter\": Filter,\n    \"app-create-document-dialog\": CreateDocumentDialog,\n  },\n  \"data\": () => ({\n    \"source\": new FilteredDocumentSource(),\n    \"loading\": false,\n    \"showCreateDialog\": false,\n  }),\n  \"mounted\": async function mounted() {\n    await this.reload();\n  },\n  \"methods\": {\n    \"onOpen\": function (event) {\n      const location = {\n        \"name\": \"document-edit\",\n        \"query\": {\n          \"document\": event.iri,\n        },\n      };\n      if (event.ctrlKey) {\n        const url = this.$router.resolve(location).href;\n        window.open(url, \"_blank\");\n      } else {\n        this.$router.push(location);\n      }\n    },\n    \"onDelete\": async function (iri) {\n      this.loading = true;\n      const database = getDatabase();\n      await database.deleteDocument(iri);\n      this.loading = false;\n      //\n      await this.reload();\n    },\n    \"onShowCreateDialog\": function () {\n      this.showCreateDialog = true;\n    },\n    \"onCreateDocument\": function(document) {\n      this.$router.push({\n        \"name\": \"document-edit\",\n        \"query\": {\n          \"document\": document.iri,\n        },\n      });\n    },\n    \"onCloseCreateDialog\": function() {\n      this.showCreateDialog = false;\n    },\n    \"reload\": async function() {\n      this.loading = true;\n      await this.source.refresh();\n      this.loading = false;\n    },\n    \"onShowMore\": function() {\n      this.source.showMore();\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n.floating-menu {\n  position: fixed;\n  right: 1rem;\n  bottom: 1rem;\n}\n\n.item-list {\n  margin-bottom: 5rem;\n}\n</style>\n","<template>\n  <v-app>\n    <v-app-bar>\n      <v-app-bar-title>\n        Knowledge Manager\n      </v-app-bar-title>\n      <v-spacer />\n      <v-btn\n        :to=\"{'name':'documents'}\"\n        class=\"mr-6\"\n      >\n        Documents\n      </v-btn>\n      <v-btn\n        :to=\"{'name':'about'}\"\n        class=\"mr-6\"\n      >\n        About\n      </v-btn>\n      <v-btn\n        href=\"https://github.com/skodapetr/knoma/issues\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        GitHub\n      </v-btn>\n    </v-app-bar>\n    <v-main>\n      <router-view />\n    </v-main>\n    <notifications\n      position=\"top center\"\n      class=\"notification\"\n    />\n  </v-app>\n</template>\n\n<script>\nexport default {\n  \"name\": \"ApplicationLayout\",\n};\n</script>\n\n<style scoped>\n.notification {\n  margin: 10px\n}\n</style>\n"],"names":[],"sourceRoot":""}